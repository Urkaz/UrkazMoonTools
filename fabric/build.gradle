plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

/*loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}*/

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Cloth Config & ModMenu
    modImplementation ("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

    // Enhanced Celestials
    if (test_enable_enhanced_celestials.toBoolean()) {
        modImplementation "curse.maven:enhanced-celestials-fabric-${ec_fabric_projectid}:${ec_fabric_fileids}"
    }
    else {
        modCompileOnly "curse.maven:enhanced-celestials-fabric-${ec_fabric_projectid}:${ec_fabric_fileids}"
    }
    modRuntimeOnly "curse.maven:corgilib-693313:${corgilib_fabric_fileids}"

//    // Crimson Moon
//    if (test_enable_crimson_moon.toBoolean()) {
//        modImplementation "curse.maven:crimson-moon-${cm_fabric_projectid}:${cm_fabric_fileids}"
//        modImplementation "dev.draylar:world-data:${cm_world_data_ver}"
//        include "dev.draylar:world-data:${cm_world_data_ver}"
//        modImplementation "draylar.omega-config:omega-config-base:${cm_omega_config_ver}"
//        include "draylar.omega-config:omega-config-base:${cm_omega_config_ver}"
//    }
//    else {
//        modCompileOnly "curse.maven:crimson-moon-${cm_fabric_projectid}:${cm_fabric_fileids}"
//        modCompileOnly "dev.draylar:world-data:${cm_world_data_ver}"
//        include "dev.draylar:world-data:${cm_world_data_ver}"
//        modCompileOnly "draylar.omega-config:omega-config-base:${cm_omega_config_ver}"
//        include "draylar.omega-config:omega-config-base:${cm_omega_config_ver}"
//    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand  "version": project.version,
                "mc_version": project.minecraft_version,
                "cloth_config_version": project.cloth_config_version,
                "architectury_version": project.architectury_version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar

    classifier "${minecraft_version}-fabric"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (System.getenv("urkaz_maven_pass") != null) {
            maven {
                name "${archives_base_name}"
                url "https://maven.franserver.mywire.org/releases"
                credentials {
                    username = "autodeploy"
                    password = System.getenv("urkaz_maven_pass")
                }
            }
        }
    }
}

unifiedPublishing {
    project {
        displayName = "[Fabric $rootProject.minecraft_version] $project.mod_name v$project.version"
        version = "$project.version"
        releaseType = "release"
        gameVersions = ["1.19.2"]
        gameLoaders = ["fabric"]

        relations {
            depends {
                curseforge = "cloth-config"
                modrinth = "cloth-config"
            }
            optional {
                curseforge = "enhanced-celestials-fabric"
                modrinth = "enhanced-celestials"
            }
            optional {
                modrinth = "modmenu"
            }
//            optional {
//                curseforge = "crimson-moon"
//            }
        }

        mainPublication remapJar

        if (project.hasProperty("cuseforge_api_key") || System.getenv("cuseforge_api_key") != null) {
            curseforge {
                token = project.hasProperty("cuseforge_api_key") ? project.property("cuseforge_api_key") : System.getenv("cuseforge_api_key")
                id = "${project.curseforge_id}"
                gameVersions.addAll "Java 17"
            }
        }

        if (project.hasProperty("modrinth_api_key") || System.getenv("modrinth_api_key") != null) {
            modrinth {
                token = project.hasProperty("modrinth_api_key") ? project.property("modrinth_api_key") : System.getenv("modrinth_api_key")
                id = "${project.modrinth_id}"
            }
        }
    }
}

rootProject.tasks.getByName("modPublish").dependsOn tasks.getByName("publishUnified")
